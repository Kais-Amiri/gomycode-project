

/*-------- funtion to get vector components---------------*/

FUNCTION vectorComponent () : Float
VAR
    x, y, z :Float
    vectorTab  : ARRAY_OF Float [3]
    i: INTEGER := 0
BEGIN
    FOR i FROM 1 TO  3 STEP 1  DO
        write ("Give the ", i, "component of the vector :");
        REPEAT
            read(vectorTab[i]);
        UNTIL (type (vectorTab[i]) = Float)
        
    END_FOR

    RETURN vectorTab ;
END




/*-----  question 1 ---------*/

/*----------procedure to calculate dot product-----------------*/
PROCEDURE dot_Product_Procedure (tab1, tab2 : ARRAY_OF FLOAT [3], VAR ps : FLOAT)
VAR
    i: INTEGER : =0
BEGIN
    FOR i FROM 0 TO 2 STEP 1  DO
        ps := ps + tab1[i]*tab2[i];
    END_FOR

    write("Dot product = ", ps);


END




/*----------------function to calculate dot product-----------------------------*/

FUNCTION dot_Product_Function(tab1, tab2 : ARRAY_OF FLOAT[3], VAR dot_Product : FLOAT) : return_type
VAR
    i: INTEGER
BEGIN
    FOR i FROM 0 TO 3 STEP 1  DO
        dot_Product := dot_Product + tab1[i]*tab2[i];
    END_FOR
    RETURN dot_Product ;
END





/*------------------Algorithm to calculate dot product with procedure----------*/

ALGORITHM calDotProduct
VAR
    Ensemble_vec1 , Ensemble_vec2 : ARRAY_OF ARRAY_OF FLOAT[3] [n] // tableau de tableau 
    i :INTEGER 
    ps: FLOAT :=0
BEGIN

    REPEAT

        write("Give the number of vector :");
        read(n);

    UNTIL ( n>0 )

    FOR i FROM 0 TO n-1 STEP 1  DO
        write("give the", i ,"pairs of vectors")
        Ensemble_vec1[i] := vectorComponent();
        Ensemble_vec2[i] := vectorComponent();
    END_FOR

    FOR i FROM 0 TO n-1 STEP 1  DO
        dot_Product_Procedure(Ensemble_vec1[i], Ensemble_vec2[i], ps);

    // ps= dot_Product_Function(Ensemble_vec1[i], Ensemble_vec2[i], ps); (if we use a function)

        IF (ps = 0) THEN
            write( i, "pairs of vectors are orthogonal")
        END_IF
    END_FOR


    
END





