

/*-------- funtion to get vector components---------------*/

FUNCTION vectorComponent () : Float
VAR
    x, y, z :Float
    vectorTab  : ARRAY_OF Float [3]
    i: INTEGER := 0
BEGIN
    FOR i FROM 1 TO  3 STEP 1  DO
        write ("Give the ", i, "component of the vector :");
        REPEAT
            read(vectorTab[i]);
        UNTIL (type (vectorTab[i]) = Float)
        
    END_FOR

    RETURN vectorTab ;
END





/*----------procedure to calculate dot product-----------------*/
PROCEDURE dot_Product_Procedure (tab1, tab2 : ARRAY_OF FLOAT [3])
VAR
    i: INTEGER : =0
    dot_Product : FLOAT := 0.00 ;
BEGIN
    FOR i FROM 0 TO 2 STEP 1  DO
        dot_Product := dot_Product + tab1[i]*tab2[i];
    END_FOR

    write("Dot product = ", dot_Product);


END




/*----------------function to calculate dot product-----------------------------*/

FUNCTION dot_Product_Function(tab1, tab2 : ARRAY_OF FLOAT[3], VAR dot_Product : FLOAT) : return_type
VAR
    i: INTEGER
BEGIN
    FOR i FROM 0 TO 3 STEP 1  DO
        dot_Product := dot_Product + tab1[i]*tab2[i];
    END_FOR
    RETURN dot_Product ;
END





/*------------------Algorithm to calculate dot product with procedure----------*/

ALGORITHM calDotProduct
VAR
    vec1 , vec2 : ARRAY_OF FLOAT [3]
BEGIN
    vec1 := vectorComponent();
    vec2 := vectorComponent();

    dot_Product_Procedure(vec1, vec2);
END





/*------------------Algorithm to calculate dot product with function----------*/

ALGORITHM calDotProduct
VAR
    vec1 , vec2 : ARRAY_OF FLOAT[3]
    dot_Product : FLOAT := 0.00
BEGIN
    vec1 := vectorComponent();
    vec2 := vectorComponent();

    dot_Product := dot_Product_Function(vec1, vec2);

    write("Dot product =", dot_Product);
END